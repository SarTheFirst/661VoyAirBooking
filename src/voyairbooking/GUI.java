/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package voyairbooking;

import java.awt.BorderLayout;
import java.awt.Dimension;
import java.awt.GridLayout;
import java.awt.Point;
import java.util.ArrayList;
import java.util.Date;
import java.util.Enumeration;
import java.util.HashMap;

import javax.swing.AbstractButton;
import javax.swing.ButtonGroup;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JButton;
import javax.swing.JComboBox;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JRadioButton;
import javax.swing.JScrollPane;
import javax.swing.JSpinner;
import javax.swing.JTree;
import javax.swing.SpinnerDateModel;
import javax.swing.SpinnerNumberModel;
import javax.swing.event.TreeModelEvent;
import javax.swing.event.TreeModelListener;
import javax.swing.event.TreeSelectionEvent;
import javax.swing.event.TreeSelectionListener;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeModel;
import org.apache.commons.validator.routines.EmailValidator;

import org.joda.time.DateTime;
import org.joda.time.LocalDate;
import org.joda.time.LocalTime;
import org.scijava.swing.checkboxtree.CheckBoxNodeData;
import org.scijava.swing.checkboxtree.CheckBoxNodeEditor;
import org.scijava.swing.checkboxtree.CheckBoxNodeRenderer;

/**
 *
 * @author Shaun
 */
@SuppressWarnings("serial")
public class GUI extends javax.swing.JFrame {

	VoyAirBooking vab;
	Dimension originalSize;
	JFrame frame = new JFrame("Flight Results");
	JFrame accountInfo = new JFrame("Account Information");
	JTree resultTree;
	ButtonGroup group;

	//JButton cancel_book_button = 
	JButton cancel_book_button = new JButton("Cancel or Rebook selected flight");
	JButton add_seats_button = new JButton("Add seats to  Selected Flight");
	JButton remove_seats_button =  new JButton("Remove seats Selected Flight");

	HashMap<String, HashMap<String, String>> available_routes = new HashMap<String, HashMap<String, String>>();
	ArrayList<String> selected_flights = new ArrayList<String>();
	/**
	 * Creates new form GUI
	 */
	public GUI() {
		this.vab = new VoyAirBooking(true);
		initComponents();
		this.originalSize = this.getSize();
		this.originalSize.height -= 125;
		this.setLocationRelativeTo(null);
		Point first = this.getLocation();
		first.x -= 140;
		this.setLocation(first);
		add_seats_button.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				add_seats_buttonActionPerformed(evt);
			}
		});
		cancel_book_button.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				cancel_book_buttonActionPerformed(evt);
			}
		});
		remove_seats_button.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				remove_seats_buttonActionPerformed(evt);
			}
		});

	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	// <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
	private void initComponents() {

		aboutPopUp = new javax.swing.JDialog();
		registerPanel = new javax.swing.JPanel();
		jLabel2 = new javax.swing.JLabel();
		usernameField = new javax.swing.JTextField();
		passwordField = new javax.swing.JPasswordField();
		jLabel1 = new javax.swing.JLabel();
		resultsPanel = new javax.swing.JPanel();
		resultScroll = new javax.swing.JScrollPane();
		bookButton = new javax.swing.JButton();
		infoText = new javax.swing.JLabel();
		registrationInfoPanel = new javax.swing.JPanel();
		jLabel4 = new javax.swing.JLabel();
		jLabel5 = new javax.swing.JLabel();
		jLabel6 = new javax.swing.JLabel();
		first_name_field = new javax.swing.JTextField();
		last_name_field = new javax.swing.JTextField();
		email_field = new javax.swing.JTextField();
		registerButton = new javax.swing.JButton();
		AccountInfoPanel = new javax.swing.JPanel();
		roundTripPanel = new javax.swing.JPanel();
		arrivalRoundTripDate = new org.freixas.jcalendar.JCalendarCombo();
		roundTripTimeDep = new javax.swing.JSpinner(new SpinnerDateModel());
		roundTripTimeArr = new javax.swing.JSpinner(new SpinnerDateModel());
		roundTripDepText = new javax.swing.JLabel();
		roundTripArrText = new javax.swing.JLabel();
		departureRoundTripDate = new org.freixas.jcalendar.JCalendarCombo();
		departingCityList = new javax.swing.JComboBox<>();
		deptartingCityText = new javax.swing.JLabel();
		ArrivalCItyText = new javax.swing.JLabel();
		destinationCityList = new javax.swing.JComboBox<>();
		departureTimeText = new javax.swing.JLabel();
		arrivalTimeText = new javax.swing.JLabel();
		findFlightButton = new javax.swing.JButton();
		LoginLogout = new javax.swing.JToggleButton();
		departureDate = new org.freixas.jcalendar.JCalendarCombo();
		arrivalDate = new org.freixas.jcalendar.JCalendarCombo();
		timeSpinnerDeparture = new javax.swing.JSpinner(new SpinnerDateModel());
		timeSpinnerArrival = new javax.swing.JSpinner(new SpinnerDateModel());
		exitButton = new javax.swing.JToggleButton();
		aboutButton = new javax.swing.JToggleButton();
		jLabel3 = new javax.swing.JLabel();
		ticketAmount = new javax.swing.JSpinner();
		round_trip = new javax.swing.JCheckBox();
		historyAndInfo = new javax.swing.JButton();

		javax.swing.GroupLayout aboutPopUpLayout = new javax.swing.GroupLayout(aboutPopUp.getContentPane());
		aboutPopUp.getContentPane().setLayout(aboutPopUpLayout);
		aboutPopUpLayout.setHorizontalGroup(
				aboutPopUpLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addGap(0, 519, Short.MAX_VALUE)
				);
		aboutPopUpLayout.setVerticalGroup(
				aboutPopUpLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addGap(0, 128, Short.MAX_VALUE)
				);

		jLabel2.setText("Password");

		jLabel1.setText("Username");

		javax.swing.GroupLayout registerPanelLayout = new javax.swing.GroupLayout(registerPanel);
		registerPanel.setLayout(registerPanelLayout);
		registerPanelLayout.setHorizontalGroup(
				registerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addGroup(registerPanelLayout.createSequentialGroup()
						.addContainerGap()
						.addGroup(registerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
								.addComponent(jLabel1)
								.addComponent(jLabel2))
						.addGap(30, 30, 30)
						.addGroup(registerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
								.addComponent(passwordField)
								.addComponent(usernameField, javax.swing.GroupLayout.DEFAULT_SIZE, 241, Short.MAX_VALUE))
						.addGap(21, 21, 21))
				);
		registerPanelLayout.setVerticalGroup(
				registerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addGroup(registerPanelLayout.createSequentialGroup()
						.addGap(21, 21, 21)
						.addGroup(registerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
								.addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
								.addComponent(usernameField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
						.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
						.addGroup(registerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
								.addGroup(registerPanelLayout.createSequentialGroup()
										.addGap(8, 8, 8)
										.addComponent(passwordField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
								.addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
						.addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
				);

		bookButton.setText("Book My Flight!");
		bookButton.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				bookButtonActionPerformed(evt);
			}
		});

		infoText.setText("Select the flights you wish to take");

		javax.swing.GroupLayout resultsPanelLayout = new javax.swing.GroupLayout(resultsPanel);
		resultsPanel.setLayout(resultsPanelLayout);
		resultsPanelLayout.setHorizontalGroup(
				resultsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addGroup(resultsPanelLayout.createSequentialGroup()
						.addContainerGap()
						.addGroup(resultsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
								.addGroup(resultsPanelLayout.createSequentialGroup()
										.addComponent(resultScroll)
										.addContainerGap())
								.addGroup(javax.swing.GroupLayout.Alignment.TRAILING, resultsPanelLayout.createSequentialGroup()
										.addGap(0, 59, Short.MAX_VALUE)
										.addGroup(resultsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
												.addGroup(javax.swing.GroupLayout.Alignment.TRAILING, resultsPanelLayout.createSequentialGroup()
														.addComponent(bookButton)
														.addGap(114, 114, 114))
												.addGroup(javax.swing.GroupLayout.Alignment.TRAILING, resultsPanelLayout.createSequentialGroup()
														.addComponent(infoText)
														.addGap(46, 46, 46))))))
				);
		resultsPanelLayout.setVerticalGroup(
				resultsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addGroup(resultsPanelLayout.createSequentialGroup()
						.addGap(6, 6, 6)
						.addComponent(infoText)
						.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
						.addComponent(resultScroll, javax.swing.GroupLayout.PREFERRED_SIZE, 158, javax.swing.GroupLayout.PREFERRED_SIZE)
						.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
						.addComponent(bookButton)
						.addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
				);

		jLabel4.setText("First Name");

		jLabel5.setText("Last Name");

		jLabel6.setText("Email");

		first_name_field.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				first_name_fieldActionPerformed(evt);
			}
		});

		registerButton.setText("Register");
		registerButton.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				registerButtonActionPerformed(evt);
			}
		});

		javax.swing.GroupLayout registrationInfoPanelLayout = new javax.swing.GroupLayout(registrationInfoPanel);
		registrationInfoPanel.setLayout(registrationInfoPanelLayout);
		registrationInfoPanelLayout.setHorizontalGroup(
				registrationInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addGroup(registrationInfoPanelLayout.createSequentialGroup()
						.addContainerGap()
						.addGroup(registrationInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
								.addComponent(jLabel5)
								.addComponent(jLabel6)
								.addComponent(jLabel4))
						.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
						.addGroup(registrationInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
								.addComponent(first_name_field)
								.addGroup(registrationInfoPanelLayout.createSequentialGroup()
										.addGap(0, 172, Short.MAX_VALUE)
										.addComponent(registerButton))
								.addComponent(email_field)
								.addComponent(last_name_field))
						.addContainerGap())
				);
		registrationInfoPanelLayout.setVerticalGroup(
				registrationInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addGroup(registrationInfoPanelLayout.createSequentialGroup()
						.addContainerGap()
						.addGroup(registrationInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
								.addComponent(jLabel4)
								.addComponent(first_name_field, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
						.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
						.addGroup(registrationInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
								.addComponent(jLabel5)
								.addComponent(last_name_field, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
						.addGroup(registrationInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
								.addGroup(registrationInfoPanelLayout.createSequentialGroup()
										.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
										.addGroup(registrationInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
												.addComponent(jLabel6)
												.addComponent(email_field, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
										.addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
								.addGroup(javax.swing.GroupLayout.Alignment.TRAILING, registrationInfoPanelLayout.createSequentialGroup()
										.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 48, Short.MAX_VALUE)
										.addComponent(registerButton)
										.addContainerGap())))
				);

		AccountInfoPanel.addComponentListener(new java.awt.event.ComponentAdapter() {
			public void componentShown(java.awt.event.ComponentEvent evt) {
				AccountInfoPanelComponentShown(evt);
			}
		});

		javax.swing.GroupLayout AccountInfoPanelLayout = new javax.swing.GroupLayout(AccountInfoPanel);
		AccountInfoPanel.setLayout(AccountInfoPanelLayout);
		AccountInfoPanelLayout.setHorizontalGroup(
				AccountInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addGap(0, 219, Short.MAX_VALUE)
				);
		AccountInfoPanelLayout.setVerticalGroup(
				AccountInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addGap(0, 100, Short.MAX_VALUE)
				);

		Date dt1 = new Date();
		DateTime dtOrg1 = new DateTime(dt1);
		arrivalRoundTripDate.setDate(dtOrg1.plusDays(1).toDate());

		timeSpinnerDeparture.setEditor(new JSpinner.DateEditor(timeSpinnerDeparture, "HH:mm"));
		timeSpinnerDeparture.setValue(new Date()); // will only show the current time

		timeSpinnerArrival.setEditor(new JSpinner.DateEditor(timeSpinnerArrival, "HH:mm"));
		timeSpinnerArrival.setValue(new Date()); // will only show the current time

		roundTripDepText.setText("<html>When do you<br>want to leave?</html");

		roundTripArrText.setText("<html>When do you<br>want to arrive?</html");

		javax.swing.GroupLayout roundTripPanelLayout = new javax.swing.GroupLayout(roundTripPanel);
		roundTripPanel.setLayout(roundTripPanelLayout);
		roundTripPanelLayout.setHorizontalGroup(
				roundTripPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addGroup(javax.swing.GroupLayout.Alignment.TRAILING, roundTripPanelLayout.createSequentialGroup()
						.addContainerGap(131, Short.MAX_VALUE)
						.addComponent(departureRoundTripDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
						.addGap(13, 13, 13)
						.addComponent(roundTripTimeDep, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
						.addContainerGap())
				.addGroup(roundTripPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
						.addGroup(roundTripPanelLayout.createSequentialGroup()
								.addContainerGap()
								.addGroup(roundTripPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
										.addComponent(roundTripDepText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
										.addGroup(roundTripPanelLayout.createSequentialGroup()
												.addComponent(roundTripArrText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
												.addGap(18, 18, 18)
												.addComponent(arrivalRoundTripDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
												.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
												.addComponent(roundTripTimeArr, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
								.addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
				);
		roundTripPanelLayout.setVerticalGroup(
				roundTripPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addGroup(roundTripPanelLayout.createSequentialGroup()
						.addContainerGap()
						.addGroup(roundTripPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
								.addComponent(departureRoundTripDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
								.addComponent(roundTripTimeDep, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
						.addContainerGap(57, Short.MAX_VALUE))
				.addGroup(roundTripPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
						.addGroup(roundTripPanelLayout.createSequentialGroup()
								.addGap(11, 11, 11)
								.addComponent(roundTripDepText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
								.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
								.addGroup(roundTripPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
										.addGroup(roundTripPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
												.addComponent(roundTripTimeArr, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
												.addComponent(arrivalRoundTripDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
										.addComponent(roundTripArrText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
								.addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
				);

		setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
		addComponentListener(new java.awt.event.ComponentAdapter() {
			public void componentShown(java.awt.event.ComponentEvent evt) {
				formComponentShown(evt);
			}
		});

		DefaultComboBoxModel model = new DefaultComboBoxModel();
		departingCityList.setModel(model);
		departingCityList.addAncestorListener(new javax.swing.event.AncestorListener() {
			public void ancestorAdded(javax.swing.event.AncestorEvent evt) {
				departingCityListAncestorAdded(evt);
			}
			public void ancestorRemoved(javax.swing.event.AncestorEvent evt) {
			}
			public void ancestorMoved(javax.swing.event.AncestorEvent evt) {
			}
		});

		deptartingCityText.setText("Departing City");

		ArrivalCItyText.setText("Arrival City");

		destinationCityList.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
		destinationCityList.addAncestorListener(new javax.swing.event.AncestorListener() {
			public void ancestorAdded(javax.swing.event.AncestorEvent evt) {
				destinationCityListAncestorAdded(evt);
			}
			public void ancestorRemoved(javax.swing.event.AncestorEvent evt) {
			}
			public void ancestorMoved(javax.swing.event.AncestorEvent evt) {
			}
		});

		departureTimeText.setText("<html>When do you<br>want to leave?</html");

		arrivalTimeText.setText("<html>When do you<br>want to arrive?</html");

		findFlightButton.setText("Find My Flight!");
		findFlightButton.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				findFlightButtonActionPerformed(evt);
			}
		});

		LoginLogout.setText("Login");
		LoginLogout.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				LoginLogoutActionPerformed(evt);
			}
		});

		Date dt = new Date();
		DateTime dtOrg = new DateTime(dt);
		arrivalDate.setDate(dtOrg.plusDays(1).toDate());

		timeSpinnerDeparture.setEditor(new JSpinner.DateEditor(timeSpinnerDeparture, "HH:mm"));
		timeSpinnerDeparture.setValue(new Date()); // will only show the current time

		timeSpinnerArrival.setEditor(new JSpinner.DateEditor(timeSpinnerArrival, "HH:mm"));
		timeSpinnerArrival.setValue(new Date()); // will only show the current time

		exitButton.setBackground(new java.awt.Color(254, 102, 58));
		exitButton.setText("Exit");
		exitButton.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				exitButtonActionPerformed(evt);
			}
		});

		aboutButton.setText("About");
		aboutButton.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				aboutButtonActionPerformed(evt);
			}
		});

		jLabel3.setText("Ticket Amount");

		ticketAmount.setModel(new javax.swing.SpinnerNumberModel(0, 0, null, 1));

		round_trip.setText("Round Trip?");
		round_trip.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				round_tripActionPerformed(evt);
			}
		});

		historyAndInfo.setText("Account Information and History");
		historyAndInfo.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				historyAndInfoActionPerformed(evt);
			}
		});

		javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
		getContentPane().setLayout(layout);
		layout.setHorizontalGroup(
				layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addGroup(layout.createSequentialGroup()
						.addContainerGap()
						.addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
								.addGroup(layout.createSequentialGroup()
										.addComponent(LoginLogout)
										.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
										.addComponent(historyAndInfo)
										.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
										.addComponent(aboutButton)
										.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
										.addComponent(exitButton))
								.addComponent(findFlightButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
								.addGroup(layout.createSequentialGroup()
										.addComponent(jLabel3)
										.addGap(18, 18, 18)
										.addComponent(ticketAmount, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
										.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
										.addComponent(round_trip))
								.addGroup(layout.createSequentialGroup()
										.addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
												.addGroup(layout.createSequentialGroup()
														.addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
																.addGroup(layout.createSequentialGroup()
																		.addComponent(departureTimeText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
																		.addGap(2, 2, 2))
																.addComponent(deptartingCityText, javax.swing.GroupLayout.Alignment.TRAILING))
														.addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
																.addGroup(layout.createSequentialGroup()
																		.addGap(15, 15, 15)
																		.addComponent(departingCityList, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
																		.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
																		.addComponent(ArrivalCItyText)
																		.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
																		.addComponent(destinationCityList, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
																.addGroup(layout.createSequentialGroup()
																		.addGap(18, 18, 18)
																		.addComponent(departureDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
																		.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
																		.addComponent(timeSpinnerDeparture, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
												.addGroup(layout.createSequentialGroup()
														.addComponent(arrivalTimeText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
														.addGap(18, 18, 18)
														.addComponent(arrivalDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
														.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
														.addComponent(timeSpinnerArrival, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
										.addGap(0, 3, Short.MAX_VALUE)))
						.addContainerGap())
				);
		layout.setVerticalGroup(
				layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addGroup(layout.createSequentialGroup()
						.addGap(15, 15, 15)
						.addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
								.addComponent(LoginLogout)
								.addComponent(exitButton)
								.addComponent(aboutButton)
								.addComponent(historyAndInfo))
						.addGap(18, 18, 18)
						.addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
								.addComponent(departureTimeText, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
								.addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
										.addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
												.addComponent(departingCityList, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
												.addComponent(deptartingCityText)
												.addComponent(ArrivalCItyText)
												.addComponent(destinationCityList, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
										.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
										.addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
												.addComponent(timeSpinnerDeparture, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
												.addComponent(departureDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
						.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
						.addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
								.addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
										.addComponent(timeSpinnerArrival, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
										.addComponent(arrivalDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
								.addComponent(arrivalTimeText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
						.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
						.addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
								.addComponent(jLabel3)
								.addComponent(ticketAmount, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
								.addComponent(round_trip))
						.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
						.addComponent(findFlightButton)
						.addContainerGap())
				);

		pack();
	}// </editor-fold>//GEN-END:initComponents

	private void departingCityListAncestorAdded(javax.swing.event.AncestorEvent evt) {//GEN-FIRST:event_departingCityListAncestorAdded
		addCities(departingCityList);
	}//GEN-LAST:event_departingCityListAncestorAdded

	private void destinationCityListAncestorAdded(javax.swing.event.AncestorEvent evt) {//GEN-FIRST:event_destinationCityListAncestorAdded
		addCities(destinationCityList);
	}//GEN-LAST:event_destinationCityListAncestorAdded

	private void findFlightButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_findFlightButtonActionPerformed
		boolean logged_in = !this.vab.vabTools.is_logged_in();
		if (!logged_in) {
			logged_in = showLoginDialog();
		}
		if (logged_in) {
			LoginLogout.setText("Logout");
			String from = String.valueOf(departingCityList.getSelectedItem());
			String to = String.valueOf(destinationCityList.getSelectedItem());
			LocalDate depDate = LocalDate.fromDateFields(departureDate.getDate());
			LocalDate arrDate = LocalDate.fromDateFields(arrivalDate.getDate());
			String departureTime = ((JSpinner.DateEditor) timeSpinnerDeparture.getEditor()).getFormat().format(timeSpinnerDeparture.getValue());
			String arrivalTime = ((JSpinner.DateEditor) timeSpinnerArrival.getEditor()).getFormat().format(timeSpinnerArrival.getValue());
			LocalTime depTime = LocalTime.parse(departureTime);
			LocalTime arrTime = LocalTime.parse(arrivalTime);
			ArrayList<ArrayList<ArrayList<String>>> all_routes = this.vab.vabTools.get_routes(from, to);

			if (all_routes != null) {
				
				ArrayList<ArrayList<ArrayList<HashMap<String, String>>>> trimmed_flights = vab.vabTools.trim_routes(all_routes, arrDate, depDate, arrTime, depTime, Integer.valueOf(ticketAmount.getValue().toString()));
				if(round_trip.isSelected()){
					LocalDate depDate1 = LocalDate.fromDateFields(departureRoundTripDate.getDate());
					LocalDate arrDate1 = LocalDate.fromDateFields(arrivalRoundTripDate.getDate());
					String departureTime1 = ((JSpinner.DateEditor) roundTripTimeDep.getEditor()).getFormat().format(roundTripTimeDep.getValue());
					String arrivalTime1 = ((JSpinner.DateEditor) roundTripTimeArr.getEditor()).getFormat().format(roundTripTimeArr.getValue());
					LocalTime depTime1 = LocalTime.parse(departureTime1);
					LocalTime arrTime1 = LocalTime.parse(arrivalTime1);
					ArrayList<ArrayList<ArrayList<String>>> return_flights = this.vab.vabTools.get_routes(to, from);
					ArrayList<ArrayList<ArrayList<HashMap<String, String>>>> returned_trimmed_flights = vab.vabTools.trim_routes(return_flights, arrDate1, depDate1, arrTime1, depTime1, Integer.valueOf(ticketAmount.getValue().toString()));
					trimmed_flights.addAll(returned_trimmed_flights);
				}
				displayResults(trimmed_flights);
			} else {
				JOptionPane.showMessageDialog(null,
						"No flights available.",
						"Uh oh!",
						JOptionPane.ERROR_MESSAGE);
			}
		}
	}//GEN-LAST:event_findFlightButtonActionPerformed

	/*
	 * HashMap: Route row
	 * ArrayList: Leg Options
	 * ArrayList: Flight Leg
	 * ArrayList: Flight Options
	 */
	public void displayResults(ArrayList<ArrayList<ArrayList<HashMap<String, String>>>> trimmed_flights) {

		DefaultMutableTreeNode root = new DefaultMutableTreeNode("Available Flights");

		for (int i = 0; i < trimmed_flights.size(); i++) {
			for (ArrayList<HashMap<String, String>> flight_leg : trimmed_flights.get(i)) {
				DefaultMutableTreeNode option = new DefaultMutableTreeNode("Options for the flight from " + flight_leg.get(0).get("departure_city_name") + " to " + flight_leg.get(0).get("destination_city_name"));
				for (HashMap<String, String> route : flight_leg) {
					available_routes.put(route.get("route_id"), route);
					add(option, "Flight ID " + route.get("route_id") + ": " + vab.vabTools.print_datetime.print(vab.vabTools.sql_formatter.parseLocalDate(route.get("date"))) + " at " + route.get("time") + " for $" + route.get("price"), false);
				}
				root.add(option);
			}
		}
		DefaultTreeModel treeModel = new DefaultTreeModel(root);
		JTree resultTree = new JTree(treeModel);
		CheckBoxNodeRenderer renderer = new CheckBoxNodeRenderer();
		resultTree.setCellRenderer(renderer);

		CheckBoxNodeEditor editor = new CheckBoxNodeEditor(resultTree);
		resultTree.setCellEditor(editor);
		resultTree.setEditable(true);

		// listen for changes in the selection
		resultTree.addTreeSelectionListener(new TreeSelectionListener() {

			@Override
			public void valueChanged(final TreeSelectionEvent e) {
				//DefaultMutableTreeNode
				DefaultMutableTreeNode the_data = (DefaultMutableTreeNode) e.getNewLeadSelectionPath().getLastPathComponent();
				CheckBoxNodeData node_data = (CheckBoxNodeData) the_data.getUserObject();
				String flight_id = node_data.getText().split(":")[0].split("ID")[1];
				System.out.println("DEBUG: Clicked on flight id " + flight_id);
				if (!node_data.isChecked()) {
					selected_flights.add(flight_id.trim());
				} else {
					selected_flights.remove(flight_id.trim());
				}
			}
		});

		// listen for changes in the model (including check box toggles)
		treeModel.addTreeModelListener(new TreeModelListener() {

			@Override
			public void treeNodesChanged(final TreeModelEvent e) {
				System.out.println(System.currentTimeMillis() + ": nodes changed");

			}

			@Override
			public void treeNodesInserted(final TreeModelEvent e) {
				System.out.println(System.currentTimeMillis() + ": nodes inserted");
			}

			@Override
			public void treeNodesRemoved(final TreeModelEvent e) {
				System.out.println(System.currentTimeMillis() + ": nodes removed");
			}

			@Override
			public void treeStructureChanged(final TreeModelEvent e) {
				System.out.println(System.currentTimeMillis() + ": structure changed");
			}
		});

		// show the tree onscreen
		resultScroll = new JScrollPane(resultTree);
		frame.add(resultScroll);
		frame.getContentPane().add(infoText, BorderLayout.NORTH);
		frame.getContentPane().add(resultScroll, BorderLayout.CENTER);
		frame.getContentPane().add(bookButton, BorderLayout.SOUTH);
		frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		frame.setSize(500, 500);
		frame.setVisible(true);

	}
	private void exitButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitButtonActionPerformed
		System.exit(0);
	}//GEN-LAST:event_exitButtonActionPerformed

	private void aboutButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_aboutButtonActionPerformed
		JOptionPane.showMessageDialog(aboutPopUp,
				"VoyAirBooking was made by Aparna Kaliappan,\n"
						+ "Alison Pfannenstein and Shari Kurland in 2016\n"
						+ "for the University of Maryland, Baltimore County.\n"
				);
	}//GEN-LAST:event_aboutButtonActionPerformed

	private void LoginLogoutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_LoginLogoutActionPerformed
		if (LoginLogout.getText().equalsIgnoreCase("Login")) {
			if (showLoginDialog()) {
				LoginLogout.setText("Logout");
				LoginLogout.setSelected(false);
				historyAndInfo.setVisible(true);
			}
		} else {
			vab.vabTools.log_out();
			LoginLogout.setText("Login");
			LoginLogout.setSelected(false);
			historyAndInfo.setVisible(false);
		}

	}//GEN-LAST:event_LoginLogoutActionPerformed

	private void bookButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bookButtonActionPerformed
		frame.setVisible(false);
		int numTickets = Integer.valueOf(ticketAmount.getValue().toString());
		for (String flight_id : selected_flights) {
			if (!vab.vabTools.save_route(flight_id, numTickets)) {
				JOptionPane.showMessageDialog(null,
						"Unable to reserve seats on flight " + flight_id,
						"Reservation error!",
						JOptionPane.WARNING_MESSAGE);
			}
		}

	}//GEN-LAST:event_bookButtonActionPerformed

	private void first_name_fieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_first_name_fieldActionPerformed
		// TODO add your handling code here:
	}//GEN-LAST:event_first_name_fieldActionPerformed

	private void registerButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_registerButtonActionPerformed

		EmailValidator ev = EmailValidator.getInstance();
		String firstName = first_name_field.getText();
		String lastName = last_name_field.getText();
		String email = email_field.getText();

		if(!ev.isValid(email)){
			registerButton.setSelected(false);
			JOptionPane.showConfirmDialog(null, 
					"Incorrect Input", 
					"Invalid email!", 
					JOptionPane.WARNING_MESSAGE,
					JOptionPane.OK_OPTION);
		}
		else{
			int res = vab.vabTools.registerGUI(usernameField.getText(), String.valueOf(passwordField.getPassword()), firstName, lastName, email);
			switch(res){
			case 0:
				JOptionPane.showConfirmDialog(null,
						"Registration succesful! Welcome " + firstName,
						"Registration success.",
						JOptionPane.INFORMATION_MESSAGE,
						JOptionPane.OK_OPTION
						);
				break;
			case 1:
				JOptionPane.showConfirmDialog(null,
						"Failed to register",
						"Registration failure.",
						JOptionPane.WARNING_MESSAGE,
						JOptionPane.OK_OPTION
						);
			}
		}
	}//GEN-LAST:event_registerButtonActionPerformed

	private void AccountInfoPanelComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_AccountInfoPanelComponentShown

	}//GEN-LAST:event_AccountInfoPanelComponentShown
	public String getSelectedButtonText(ButtonGroup buttonGroup) {
		for (Enumeration<AbstractButton> buttons = buttonGroup.getElements(); buttons.hasMoreElements();) {
			AbstractButton button = buttons.nextElement();

			if (button.isSelected()) {
				return button.getText();
			}
		}

		return null;
	}
	private void add_seats_buttonActionPerformed(java.awt.event.ActionEvent evt){
		String flight_id = getSelectedButtonText(group).split("which takes off at ")[0].split("#")[1];
		HashMap<String, String> reservationInfo = vab.vabTools.getReservationInfo(flight_id);
		SpinnerNumberModel snm = new SpinnerNumberModel();
		snm.setMinimum(0);
		JSpinner spinner = new JSpinner(snm);

		int option = JOptionPane.showOptionDialog(null, spinner, "Enter amount of tickets.", JOptionPane.OK_CANCEL_OPTION, JOptionPane.QUESTION_MESSAGE, null, null, null);
		if (option == JOptionPane.OK_OPTION)
		{
			int num_tickets = Integer.valueOf(spinner.getValue().toString());

			if(vab.vabTools.add_seats(flight_id, num_tickets, Integer.valueOf(reservationInfo.get("numtickets")))){
				accountInfo.setVisible(false);
				historyAndInfoActionPerformed(evt);				
			}
			else{
				JOptionPane.showConfirmDialog(null, "Unable to add seats", "Warning!", JOptionPane.OK_OPTION, JOptionPane.WARNING_MESSAGE);
			}
		}    	


	}
	private void remove_seats_buttonActionPerformed(java.awt.event.ActionEvent evt){
		String flight_id = getSelectedButtonText(group).split("which takes off at ")[0].split("#")[1];
		HashMap<String, String> reservationInfo = vab.vabTools.getReservationInfo(flight_id);
		SpinnerNumberModel snm = new SpinnerNumberModel();
		snm.setMinimum(0);
		snm.setMaximum(Integer.valueOf(reservationInfo.get("numtickets")));
		JSpinner spinner = new JSpinner(snm);

		int option = JOptionPane.showOptionDialog(null, spinner, "Enter amount of tickets.", JOptionPane.OK_CANCEL_OPTION, JOptionPane.QUESTION_MESSAGE, null, null, null);
		if (option == JOptionPane.OK_OPTION)
		{
			int num_tickets = Integer.valueOf(spinner.getValue().toString());

			if(vab.vabTools.remove_seats(flight_id, num_tickets, Integer.valueOf(reservationInfo.get("numtickets")))){
				accountInfo.setVisible(false);
				historyAndInfoActionPerformed(evt);
			}
			else{
				JOptionPane.showConfirmDialog(null, "Unable to remove seats", "Warning!", JOptionPane.OK_OPTION, JOptionPane.WARNING_MESSAGE);
			}
		}    	

	}
	private void cancel_book_buttonActionPerformed(java.awt.event.ActionEvent evt){
		String flight_id = getSelectedButtonText(group).split("which takes off at ")[0].split("#")[1];
		HashMap<String, String> reservationInfo = vab.vabTools.getReservationInfo(flight_id);
		if(reservationInfo.get("cancelled").equalsIgnoreCase("0")){
			if(vab.vabTools.cancelFlight(flight_id, reservationInfo.get("numtickets"))){
				accountInfo.setVisible(false);
				historyAndInfoActionPerformed(evt);

			}
			else{
				JOptionPane.showConfirmDialog(null, "Unable to cancel flight", "Warning!", JOptionPane.OK_OPTION, JOptionPane.WARNING_MESSAGE);
			}
		}
		else{
			if(vab.vabTools.rebookFlight(flight_id, reservationInfo.get("numtickets"))){
				accountInfo.setVisible(false);
				historyAndInfoActionPerformed(evt);
			}
			else{
				JOptionPane.showConfirmDialog(null, "Unable to rebook flight.", "Warning!", JOptionPane.OK_OPTION, JOptionPane.WARNING_MESSAGE);
			}

		}


	}
	private void formComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_formComponentShown
		historyAndInfo.setVisible(false);
	}//GEN-LAST:event_formComponentShown

	private void historyAndInfoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_historyAndInfoActionPerformed
		JLabel welcomeMessage = new JLabel("Welcome " + vab.vabTools.getFirstName() + "!");
		accountInfo.add(welcomeMessage, BorderLayout.NORTH);
		accountInfo.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		group = new ButtonGroup();
		if(selected_flights.isEmpty()){
			ArrayList<HashMap<String, String>> booked_flights = vab.vabTools.display_reserved_flights();
			for(HashMap<String, String> flight : booked_flights){
				selected_flights.add(flight.get("route_id"));
			}

		}
		accountInfo.getContentPane().setLayout(new GridLayout(selected_flights.size(), 0)); // rows columns
		for(String flight : selected_flights){
			HashMap<String, String> aFlight = available_routes.get(flight);
			if(aFlight == null){
				aFlight = vab.vabTools.getFlightInfo(flight);
			}
			HashMap<String, String> reservationInfo =  vab.vabTools.getReservationInfo(flight);
			String label = "<html>"
					+ "Flight #" +aFlight.get("route_id") 
					+ " which takes off at " + 
					vab.vabTools.print_datetime.print(vab.vabTools.sql_formatter.parseLocalDate(aFlight.get("date"))) 
					+ " at " + aFlight.get("time") + "<br>";
			if(reservationInfo.get("cancelled").equalsIgnoreCase("0")){
				label += "You have " + reservationInfo.get("numtickets") + " tickets reserved at $" + reservationInfo.get("price") + " each. </html>";
			}
			else{
				label += "You have cancelled your reservation for this flight. </html>";
			}
			JRadioButton btn = new JRadioButton(label);
			accountInfo.add(btn);
			group.add(btn);

		}
		accountInfo.getContentPane().add(this.cancel_book_button, BorderLayout.SOUTH);
		accountInfo.getContentPane().add(this.add_seats_button, BorderLayout.SOUTH);
		accountInfo.getContentPane().add(this.remove_seats_button, BorderLayout.SOUTH);

		accountInfo.pack();
		accountInfo.setVisible(true);
	}//GEN-LAST:event_historyAndInfoActionPerformed

	private void round_tripActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_round_tripActionPerformed
		JOptionPane.showConfirmDialog(null, roundTripPanel);
	}//GEN-LAST:event_round_tripActionPerformed

	private boolean showLoginDialog() {
		int result = JOptionPane.showConfirmDialog(null, registerPanel, "Login to VoyAirBooking",
				JOptionPane.OK_CANCEL_OPTION, JOptionPane.PLAIN_MESSAGE);
		if (result == JOptionPane.OK_OPTION) {
			String username = usernameField.getText();
			String password = String.valueOf(passwordField.getPassword());
			result = this.vab.vabTools.tryLoggingInGUI(username, password);
			switch (result) {
			case -1:
				JOptionPane.showMessageDialog(null,
						"Horrible error!",
						"AAAH",
						JOptionPane.ERROR_MESSAGE);
				break;
			case 0:
				JOptionPane.showMessageDialog(null,
						"Login Successful!\nWelcome back " + username,
						"Success!",
						JOptionPane.PLAIN_MESSAGE
						);
				return true;
			case 1:

				int register = JOptionPane.showConfirmDialog(
						null,
						"No account found with that username.\n"
								+ "Do you want to register with that password?",
								"No Account Found",
								JOptionPane.YES_NO_OPTION);
				if(register == JOptionPane.YES_OPTION){
					JOptionPane.showConfirmDialog(null, registrationInfoPanel, 
							"Registration Information",
							JOptionPane.PLAIN_MESSAGE);

				}
				break;

			}
		}
		return false;
	}

	private void addCities(JComboBox<String> dropdown) {
		DefaultComboBoxModel<String> model = new DefaultComboBoxModel<String>();
		dropdown.setModel(model);
		int maxSize = -1;
		ArrayList<String> cities = this.vab.vabTools.get_cities();
		cities.add(0, "Select A City");
		for (String s : cities) {
			if (s.length() > maxSize) {
				maxSize = s.length();
			}
			model.addElement(s);
		}
		Dimension d = this.getSize();
		d.width += maxSize + 125; // [massive shrug of guestimation how this works]
		this.setSize(d);
	}

	/**
	 * @param args the command line arguments
	 */
	public static void main(String args[]) {
		/* Set the Nimbus look and feel */
		//<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
		/* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
		 * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
		 */
		try {
			for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
				if ("Nimbus".equals(info.getName())) {
					javax.swing.UIManager.setLookAndFeel(info.getClassName());
					break;
				}
			}
		} catch (ClassNotFoundException ex) {
			java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
		} catch (InstantiationException ex) {
			java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
		} catch (IllegalAccessException ex) {
			java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
		} catch (javax.swing.UnsupportedLookAndFeelException ex) {
			java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
		}
		//</editor-fold>

		/* Create and display the form */
		java.awt.EventQueue.invokeLater(new Runnable() {
			public void run() {
				new GUI().setVisible(true);
			}
		});
	}

	private static DefaultMutableTreeNode add(
			final DefaultMutableTreeNode parent, final String text,
			final boolean checked) {
		final CheckBoxNodeData data = new CheckBoxNodeData(text, checked);
		final DefaultMutableTreeNode node = new DefaultMutableTreeNode(data);
		parent.add(node);
		return node;
	}


	// Variables declaration - do not modify//GEN-BEGIN:variables
	private javax.swing.JPanel AccountInfoPanel;
	private javax.swing.JLabel ArrivalCItyText;
	private javax.swing.JToggleButton LoginLogout;
	private javax.swing.JToggleButton aboutButton;
	private javax.swing.JDialog aboutPopUp;
	private org.freixas.jcalendar.JCalendarCombo arrivalDate;
	private org.freixas.jcalendar.JCalendarCombo arrivalRoundTripDate;
	private javax.swing.JLabel arrivalTimeText;
	private javax.swing.JButton bookButton;
	private javax.swing.JComboBox<String> departingCityList;
	private org.freixas.jcalendar.JCalendarCombo departureDate;
	private org.freixas.jcalendar.JCalendarCombo departureRoundTripDate;
	private javax.swing.JLabel departureTimeText;
	private javax.swing.JLabel deptartingCityText;
	private javax.swing.JComboBox<String> destinationCityList;
	private javax.swing.JTextField email_field;
	private javax.swing.JToggleButton exitButton;
	private javax.swing.JButton findFlightButton;
	private javax.swing.JTextField first_name_field;
	private javax.swing.JButton historyAndInfo;
	private javax.swing.JLabel infoText;
	private javax.swing.JLabel jLabel1;
	private javax.swing.JLabel jLabel2;
	private javax.swing.JLabel jLabel3;
	private javax.swing.JLabel jLabel4;
	private javax.swing.JLabel jLabel5;
	private javax.swing.JLabel jLabel6;
	private javax.swing.JTextField last_name_field;
	private javax.swing.JPasswordField passwordField;
	private javax.swing.JButton registerButton;
	private javax.swing.JPanel registerPanel;
	private javax.swing.JPanel registrationInfoPanel;
	private javax.swing.JScrollPane resultScroll;
	private javax.swing.JPanel resultsPanel;
	private javax.swing.JLabel roundTripArrText;
	private javax.swing.JLabel roundTripDepText;
	private javax.swing.JPanel roundTripPanel;
	private javax.swing.JSpinner roundTripTimeArr;
	private javax.swing.JSpinner roundTripTimeDep;
	private javax.swing.JCheckBox round_trip;
	private javax.swing.JSpinner ticketAmount;
	private javax.swing.JSpinner timeSpinnerArrival;
	private javax.swing.JSpinner timeSpinnerDeparture;
	private javax.swing.JTextField usernameField;
	// End of variables declaration//GEN-END:variables

}
